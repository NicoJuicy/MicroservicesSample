// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Notes.WebApi.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NotesWebApi.
    /// </summary>
    public static partial class NotesWebApiExtensions
    {
            /// <summary>
            /// Gets all notes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Note> GetAllNotes(this INotesWebApi operations)
            {
                return operations.GetAllNotesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all notes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Note>> GetAllNotesAsync(this INotesWebApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllNotesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='note'>
            /// Note
            /// </param>
            public static void AddNote(this INotesWebApi operations, Note note = default(Note))
            {
                operations.AddNoteAsync(note).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='note'>
            /// Note
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddNoteAsync(this INotesWebApi operations, Note note = default(Note), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddNoteWithHttpMessagesAsync(note, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a note by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Note id
            /// </param>
            public static Note GetNoteById(this INotesWebApi operations, string id)
            {
                return operations.GetNoteByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a note by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Note id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Note> GetNoteByIdAsync(this INotesWebApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNoteByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Note id
            /// </param>
            /// <param name='note'>
            /// Note
            /// </param>
            public static void UpdateNote(this INotesWebApi operations, string id, Note note = default(Note))
            {
                operations.UpdateNoteAsync(id, note).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Note id
            /// </param>
            /// <param name='note'>
            /// Note
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateNoteAsync(this INotesWebApi operations, string id, Note note = default(Note), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateNoteWithHttpMessagesAsync(id, note, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Note id
            /// </param>
            public static void DeleteNote(this INotesWebApi operations, string id)
            {
                operations.DeleteNoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Note id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNoteAsync(this INotesWebApi operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
